/** 
 * 
 */
package fr.utbm.cvrp.solver


import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.util.concurrent.atomic.AtomicInteger
import io.sarl.core.Lifecycle
import java.util.concurrent.ConcurrentLinkedQueue

/** 
 * Boot agent
 * <br>His goal is just to launch the task agent and then die
 * 
 * <br>MAS Systems based on <a href=https://www.semanticscholar.org/paper/Agents-towards-vehicle-routing-problems-Vokr%C3%ADnek-Komenda/1d486f85f0810331c8feb203ac126a7c192d00e1#related-papers>Agents towards vehicle routing problems</a> article
 * <br>Strategy implemented: FIFO-ITER-CNP-RA
 * 
 */
agent BootAgent {
	uses Lifecycle, Logging

	on Initialize {
		// His logging name
		loggingName = "Boot agent"
		
		// Logging info
		info("The program has been launched.")

		// List of customers compose of
		// id, x, y, demand
		var customers_list : ConcurrentLinkedQueue<String> = new ConcurrentLinkedQueue<String>()
		// Create the customers
		customers_list.add("2 10 0 10")
		customers_list.add("3 10 25 95")
		customers_list.add("4 30 10 75")
		customers_list.add("5 40 55 25")

		// id, x, y of the depot node
		var depot : String = "1 0 0"
		// Set the vehicle capacity
		var vehicle_capacity : AtomicInteger = new AtomicInteger(100)

		// Spawn the agent SearchManager and SearchAgent
		spawn(TaskAgent, depot, customers_list, vehicle_capacity)

		// Kill it self
		killMe
	}
}

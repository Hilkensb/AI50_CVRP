/** 
 * 
 */
package fr.utbm.vrp.agents


import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import io.sarl.core.InnerContextAccess
import io.sarl.core.Schedules
import java.util.concurrent.atomic.AtomicInteger
import java.util.UUID
import java.util.concurrent.ConcurrentLinkedQueue
import io.sarl.core.MemberLeft

/** 
 * AllocationAgent
 * <br>His goal is to insert customers where the insertion cost is minimized
 * <br>Strategies: CNP-RA
 * 
 */
agent AllocationAgent {
	// Skills used
	uses Logging, DefaultContextInteractions, Lifecycle, InnerContextAccess, Schedules

	// id, x, y of the depot node
	var depot : String
	// Vehicle capacity
	var vehicle_capacity : AtomicInteger = new AtomicInteger()

	// UUID of the task agent
	var taskAgentUUID : UUID
	// Number of vehicle
	var number_vehicle : AtomicInteger
	// Count the number of route returned
	var num_of_solution_returned : AtomicInteger = new AtomicInteger(0)

	// The customer actually insert
	var actual_customer_insert : String
	// Number of Vehicle agent that returned a solution
	var number_agent_returned : int = 0
	// Best estimation insertion cost
	var best_insertion_cost : double = Double.MAX_VALUE
	// Best Vehicle agent with the lowest estimation cost
	var best_vehicle_insert : UUID

	// List of uuid to all vehicle agent that must relocates theirs customers
	var vehicle_agents : ConcurrentLinkedQueue<UUID> = new ConcurrentLinkedQueue<UUID>
	// List of customers to relocate
	var customer_relocate : ConcurrentLinkedQueue<String> = new ConcurrentLinkedQueue<String>

	// Bool to know if the vehicle agent has start to die
	var dying: Boolean = false
	
	on Initialize {
		// Set the logging name of the agent
		loggingName = "Allocation Agent"
		// Tell on logging that the agent started normally
		info("The agent has started.")

		// Change the logging level to warning to gain some time to not display
		// all messages published by the agents
		// level - 0 or lower for no logging, 1 for error, 2 for warning, 3 for info, 4 or higher for debug.
		setLogLevel(2)

		// Get the customers, depot and capacity
		depot = occurrence.parameters.get(0) as String
		vehicle_capacity = occurrence.parameters.get(1) as AtomicInteger
		// Get it has integer
		var number_vehicle_int = occurrence.parameters.get(2) as Integer
		// Create an atomic int
		number_vehicle = new AtomicInteger(number_vehicle_int)

		// Save the task agent uuid
		taskAgentUUID = occurrence.parameters.get(3) as UUID 
		
		// BUG ?!?
		info(occurrence.source.getID())
		info(taskAgentUUID)

		// Spawn all the vehicle agent
		for (var vehicle_i : int = 1; vehicle_i <= number_vehicle_int; vehicle_i++) {
			// Generate a new UUID
			var vehicleUUID : UUID = UUID.randomUUID()
			// Spawn the VehicleAgent
			spawnInContextWithID(typeof(VehicleAgent), vehicleUUID, innerContext, depot, vehicle_capacity, this.ID)
		}

		// Wait the vehicle agents to spawn
		val task = task("waiting_for_vehicle_agent")
		task.every(100) [
			// AtomicInteger, so it's thread safe
			if (getMemberAgentCount() == number_vehicle.get()) {
				// Logging info
				info("New customer is requested.")
				// Ask for a new customer
				emit(new nextCustomerRequest())[it.ID == taskAgentUUID]
				task.cancel
			}
		]
	}

	on nextCustomer {
		// Logging info
		info("New customer received.")
		// Get the customer to insert
		// All reference assignments are atomic in java, so thread safe
		// source: https://stackoverflow.com/questions/7421558/is-string-s-foobar-atomic
		actual_customer_insert = occurrence.customer

		// Emit the event in the default space of inner context
		innerContext.defaultSpace.emit(this.ID, new insertCustomerEstimate(actual_customer_insert))
	}

	on finish {
		info("Emitting finish event.")
		// Emit the event in the inner context to the vehicle agents
		innerContext.defaultSpace.emit(this.ID, new finishVehicle())
	}

	on MemberLeft {
		// Logging info
		info("A VehicleAgent has die.")
		
		synchronized (this) {
			// Check if there's more than 0 VehicleAgent in the inner context
			// And has not already entered in it
			if (getMemberAgentCount() == 0 && !this.dying) {
				this.dying = true

				val task = task("waiting_for_solution_sent")
				task.every(100) [
					if (num_of_solution_returned >= number_vehicle) {
					// If there's no more VehicleAgent
					// Logging info
						info("Killing myself.")

					// Cancel the task
						task.cancel
					// Kill itself
						killMe
					}
				]

			}
		}
	}
	
	on solution {
		num_of_solution_returned.incrementAndGet()
		// Logging info
		info("Solution received.")
		// Redirect the solution to the TaskAgent
		emit(new solution(occurrence.route))[it.ID == taskAgentUUID]
	}

	on customerInserted {
		// Logging info
		info("Customer inserted.")
		
		// For all agents in the inner context
		for(vehicle_agent: getMemberAgents()){
			// Add their uuid to a list of uuid of VehicleAgents
			this.vehicle_agents.add(vehicle_agent)
		}

		var vehicle_customer_relocate : UUID = this.vehicle_agents.poll()
		innerContext.defaultSpace.emit(this.ID, new removeAll())[it.ID == vehicle_customer_relocate]

	}
	
	on relocate {
		// Logging info
		info("Relocating all customers.")
		
		// If there is no customer to insert
		// For example it happen when the first customer has been inserted
		// Then one VehicleAgent have one customer and others have nothing
		if (occurrence.customers.isEmpty()) {
			// Logging info
			info("Empty vehicle.")

			// If there's other VehicleAgent
			if (!this.vehicle_agents.isEmpty()) {
				info("Go for the next VehicleAgent.")
				// Ask the next VehicleAgent to remove all its customers
				var vehicle_customer_relocate : UUID = this.vehicle_agents.poll()
				innerContext.defaultSpace.emit(this.ID, new removeAll())[it.ID == vehicle_customer_relocate]
			} else {
				info("No more VehicleAgent to relocate customers")
				
				// Emit a new customer request
				emit(new nextCustomerRequest())[it.ID == taskAgentUUID]
			}

		} else {

			// Add all the customers to relocate
			for (customer : occurrence.customers) {
				this.customer_relocate.add(customer)
			}

			actual_customer_insert = this.customer_relocate.poll()
			// Emit the event in the default space of inner context
			innerContext.defaultSpace.emit(this.ID, new relocateCustomerEstimate(actual_customer_insert))
			
		}
	}

	on customerRelocated {
		info("Customer relocated.")
		
		if (this.customer_relocate.isEmpty()) {
			if (!this.vehicle_agents.isEmpty()) {
				info("Go for the next VehicleAgent.")
			
			// Ask the next VehicleAgent to remove all its customers
				var vehicle_customer_relocate : UUID = this.vehicle_agents.poll()
				innerContext.defaultSpace.emit(this.ID, new removeAll())[it.ID == vehicle_customer_relocate]
			} else {
				info("No more VehicleAgent to relocate customers")
			
				// Emit a new customer request
				emit(new nextCustomerRequest())[it.ID == taskAgentUUID]
			}
		} else {
			actual_customer_insert = this.customer_relocate.poll()
			
			// Emit the event in the default space of inner context
			innerContext.defaultSpace.emit(this.ID, new relocateCustomerEstimate(actual_customer_insert))
		}

	}

	on relocateCostEstimation {
		info("Estimation received.")

		synchronized (this) {
			// Increment the number of response of vehicle agent
			this.number_agent_returned++

			// If the solution is the best found
			if (best_insertion_cost > occurrence.cost) {
				// Save the cost
				best_insertion_cost = occurrence.cost
				// Save the vehicle agent that have the best insertion proposal
				best_vehicle_insert = occurrence.source.ID
			}
			
			// if all the VehicleAgent have sent their estimation
			if (this.number_agent_returned == this.number_vehicle) {

				// Reset the insertion values
				best_insertion_cost = Integer.MAX_VALUE
				number_agent_returned = 0

				info("Request to relocate customer.")

				innerContext.defaultSpace.emit(this.ID, new relocateCustomer(actual_customer_insert)) [
					it.ID == best_vehicle_insert
				]
			} 
		}
	}
	
	on insertionCostEstimation {
		info("Estimation received.")
	
		synchronized (this) {
			// Increment the number of response of vehicle agent
			this.number_agent_returned++
			
			// If the solution is the best found
			if (best_insertion_cost > occurrence.cost) {
				// Save the cost
				best_insertion_cost = occurrence.cost
				// Save the vehicle agent that have the best insertion proposal
				best_vehicle_insert = occurrence.source.ID
			}
			if (this.number_agent_returned == this.number_vehicle && best_insertion_cost < Integer.MAX_VALUE) {
				
				// Reset the insertion values
				best_insertion_cost = Integer.MAX_VALUE
				number_agent_returned = 0

				info("Request to insert customer.")

				// Insert the customer
				var insertCustomerEvt = new insertCustomer(actual_customer_insert)
				innerContext.defaultSpace.emit(this.ID, insertCustomerEvt)[it.ID == best_vehicle_insert]

			} else if (this.number_agent_returned == this.number_vehicle) {
				info("Spawning a new vehicle agent.")

				// Reset the insertion values
				best_insertion_cost = Integer.MAX_VALUE
				number_agent_returned = 0

				// Emit an event to tell that the number of vehicles has increased
				emit(new vehicleInserted())[it.ID == taskAgentUUID]
				
				var vehicleUUID : UUID = UUID.randomUUID()
				// Spawn the VehicleAgent
				spawnInContextWithID(typeof(VehicleAgent), vehicleUUID, innerContext, depot, vehicle_capacity, this.ID)
				// increment the number of vehicle
				number_vehicle.incrementAndGet()

				// Wait the vehicle agents to spawn
				val task = task("waiting_for_vehicle_agent_" + number_vehicle.get().toString())
				task.every(100) [
					if (getMemberAgentCount() == number_vehicle.get()) {
						info("Restarting CNP.")

						// Retry to insert the customer
						innerContext.defaultSpace.emit(this.ID, new insertCustomerEstimate(actual_customer_insert))
						task.cancel
					}
				]
			
			}
		}
	}

}
